@page "/con"
@using Infraestructura.Models.Biometrico
@using Infraestructura.Models.Clasificador
@using Microsoft.AspNetCore.Components
@using Syncfusion.Blazor.Grids
@using System.Globalization
@using Server.Pages.Pages.Biometrico
@using MudBlazor
@using Syncfusion.Blazor.Buttons
@inherits MainBaseComponent
@layout MainLayout
@inject NavigationManager Navigation
@inject NavigationManager Nav
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService


<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <!-- Filtros -->
    <MudPaper Class="pa-4" Outlined="true">
        <MudGrid>
            <!-- Autocomplete para nombre -->
            <MudItem xs="12" sm="4">
                <MudAutocomplete T="string"
                                 @bind-Value="BusquedaNombre"
                                 Label="Nombre del funcionario"
                                 Placeholder="Ej: Juan Pérez"
                                 HelperText="Busque por nombre completo"
                                 Required="true"
                                 RequiredError="Campo obligatorio"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 AdornmentIcon="@Icons.Material.Filled.PersonSearch"
                                 SearchFunc="@SearchNombres"
                                 OnValueChanged="async (value) => {
                             BusquedaNombre = value;
                             await GetAsistencias();
                         }"
                                 MinCharacters="3"
                                 DebounceInterval="500" />
            </MudItem>

            <!-- Selector de fecha inicio -->
            <MudItem xs="12" sm="4">
                <MudDatePicker Label="Fecha Inicio"
                               @bind-Date="FechaInicio"
                               Placeholder="DD/MM/AAAA"
                               HelperText="Seleccione fecha inicial"
                               Required="true"
                               RequiredError="Fecha requerida"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               DateFormat="dd/MM/yyyy"
                               AdornmentIcon="@Icons.Material.Filled.CalendarToday" />
            </MudItem>

            <!-- Selector de fecha fin -->
            <MudItem xs="12" sm="4">
                <MudDatePicker Label="Fecha Fin"
                               @bind-Date="FechaFin"
                               Placeholder="DD/MM/AAAA"
                               HelperText="Seleccione fecha final"
                               Required="true"
                               RequiredError="Fecha requerida"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               DateFormat="dd/MM/yyyy"
                               AdornmentIcon="@Icons.Material.Filled.CalendarMonth" />
            </MudItem>
        </MudGrid>

        <!-- Botón mejorado -->
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Size="Size.Large"
                   EndIcon="@Icons.Material.Filled.PictureAsPdf"
                   Class="mt-4"
                   Margin="Margin.Dense"
                   Disabled="@(!HayParametrosValidos)"
                   OnClick="FiltrarAsistenciasYGenerarReporte"
                   Style="width: 300px; letter-spacing: 1px;">
            <MudText Typo="Typo.h6">Generar Reporte PDF</MudText>
        </MudButton>
    </MudPaper>

    <!-- Tabla de Asistencias -->
<MudPaper Class="pa-4 mt-4" Elevation="5" Outlined="true" Style="border-radius: 8px;">
    <MudTable Items="@AsistenciasList"
              Hover="true"
              Bordered="true"
              Striped="true"
              Dense="true"
              SortLabel="Ordenar por"
              @bind-SortBy="_sortBy"
              @bind-SortDirection="_sortDirection"
              Breakpoint="Breakpoint.None"
              Class="custom-table">

        <HeaderContent>
            <MudTh SortBy="@nameof(SVistaAsistenciasDto.NombreApellido)" Style="width: 25%;">
                Funcionario
            </MudTh>

            <MudTh SortBy="@nameof(SVistaAsistenciasDto.Ci)" Style="width: 15%;">
                Cédula
            </MudTh>

            <MudTh SortBy="@nameof(SVistaAsistenciasDto.ShiftDate)" Style="width: 20%; text-align: center;">
                Fecha
            </MudTh>

            <MudTh Style="width: 20%; text-align: center;">
                Registro Entrada
            </MudTh>

            <MudTh Style="width: 20%; text-align: center;">
                Registro Salida
            </MudTh>
        </HeaderContent>

        <RowTemplate>
            <!-- Nombre -->
            <MudTd DataLabel="Funcionario" Class="font-weight-medium">
                @context.NombreApellido
            </MudTd>

            <!-- Cédula -->
            <MudTd DataLabel="Cédula">
                <MudText>@context.Ci</MudText>
            </MudTd>

            <!-- Fecha -->
            <MudTd DataLabel="Fecha" Class="text-center">
                @context.ShiftDate?.ToString("dd MMM yyyy", 
                    CultureInfo.CreateSpecificCulture("es-ES"))
            </MudTd>

                <!-- Entrada -->
                <MudTd DataLabel="Entrada"
                       Class="@($"text-center {(string.IsNullOrEmpty(context.HoraEntrada) ? "missing-register" : "")}")">
                    @if (string.IsNullOrEmpty(context.HoraEntrada))
                    {
      
                        <MudText Color="Color.Error">Sin registro</MudText>
                    }
                    else
                    {
                        @DateTime.Parse(context.HoraEntrada).ToString("HH:mm")
                    }
                </MudTd>

                <!-- Salida -->
                <MudTd DataLabel="Salida"
                       Class="@($"text-center {(string.IsNullOrEmpty(context.HoraSalida) ? "missing-register" : "")}")">
                    @if (string.IsNullOrEmpty(context.HoraSalida))
                    {
    
                        <MudText Color="Color.Error">Sin registro</MudText>
                    }
                    else
                    {
                        @DateTime.Parse(context.HoraSalida).ToString("HH:mm")
                    }
                </MudTd>
        </RowTemplate>

        <FooterContent>
            <MudTd ColSpan="5">
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Total registros: @AsistenciasList?.Count
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        @DateTime.Now.ToString("dd MMM yyyy HH:mm", CultureInfo.CreateSpecificCulture("es-ES"))
                    </MudText>
                </div>
            </MudTd>
        </FooterContent>
    </MudTable>
</MudPaper>
</MudContainer>


@code {
    // Variables para ordenamiento
    private string _sortBy = nameof(SVistaAsistenciasDto.ShiftDate);
    private Syncfusion.Blazor.Grids.SortDirection _sortDirection = Syncfusion.Blazor.Grids.SortDirection.Descending;
    private bool HayParametrosValidos =>
    !string.IsNullOrWhiteSpace(BusquedaNombre) &&
    FechaInicio.HasValue &&
    FechaFin.HasValue &&
    FechaInicio <= FechaFin;
    private async Task GenerarReporte()
    {
        var parametrosReporte = new
        {
            ruta = "/Reports/ENVIBOL/RRHH/Asistencia",
            fecha_inicio = FechaInicio?.ToString("yyyy-MM-dd"),
            fecha_fin = FechaFin?.ToString("yyyy-MM-dd"),
            nombre_apellido = BusquedaNombre
        };

        var urlReporte = await JSRuntime.InvokeAsync<string>(
            "CargaReportePdf",
            parametrosReporte
        );

        var parameters = new DialogParameters {
            { "UrlReporte", urlReporte }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseOnEscapeKey = true
            };

        DialogService.Show<PdfDialog>("Reporte de Asistencias", parameters, options);
    }
 
}
<style>
    .custom-table .missing-register {
        background-color: #fff3f2;
        border-left: 4px solid #ff4444;
    }

    .custom-table .mud-table-cell {
        vertical-align: middle;
    }

    .custom-table .mud-table-row:hover .missing-register {
        background-color: #ffeceb;
    }
</style>